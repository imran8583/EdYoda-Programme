{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyObD/pFFCrCsdAkks3RX9Tp"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "# Problem 1: Finding the percentage\n",
        "\n",
        "if __name__==\"__main__\":\n",
        "    n = int(input())\n",
        "    student_marks = {}\n",
        "    for _ in range(n):\n",
        "        name, *line = input().split()\n",
        "        scores = list(map(float, line))\n",
        "        student_marks[name] = scores\n",
        "    query_name = input()\n",
        "\n",
        "\n",
        "    total_marks = 0\n",
        "    for mark in student_marks[query_name]:\n",
        "        total_marks += mark\n",
        "    average = total_marks/len(student_marks[query_name])\n",
        "    print(\"%0.2f\" % average)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VeUO5ua3RWw9",
        "outputId": "f50ed386-08a2-4628-e024-e34b3f9608bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "abdul 78 46 91\n",
            "abdul\n",
            "71.67\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "v70THh2EOaN-"
      },
      "outputs": [],
      "source": [
        "# Problem 2: String Split and Join\n",
        "\n",
        "def split_and_join(line):\n",
        "    # write your code here\n",
        "    splitted_line = line.split(\" \")\n",
        "    joined_line = \"-\".join(splitted_line)\n",
        "    return joined_line\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    line = input()\n",
        "    result = split_and_join(line)\n",
        "    print(result)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 3: Set .intersection() Operation\n",
        "eng_num = input()\n",
        "eng = input().split(\" \")\n",
        "set1 = set(eng)\n",
        "\n",
        "fre_num = input()\n",
        "fren = input().split(\" \")\n",
        "set2 = set(fren)\n",
        "\n",
        "\n",
        "result = set1.intersection(set2)\n",
        "\n",
        "\n",
        "print(len(result))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kxykQmcBTbgt",
        "outputId": "e4a75f29-68bd-4542-83f6-eb3f5b1d9820"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n",
            "1 2 3 4 5 6 7 8 9\n",
            "9\n",
            "10 1 2 3 11 21 55 6 8\n",
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 4: Find the Runner-Up Score!\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    n = int(input())\n",
        "    arr = map(int, input().split())\n",
        "    arr = list(arr)\n",
        "\n",
        "    winner = max(arr)\n",
        "    duplicate = arr.count(winner)\n",
        "    \n",
        "    for i in range(duplicate):\n",
        "        arr.remove(winner)\n",
        "    print(max(arr))\n"
      ],
      "metadata": {
        "id": "jjF6FnTReP4S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c6872110-b1e4-49a3-c7d7-d4e0deaea0f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "6 3 9 5 2 1 9 2 4 8 2 9 2 7 3 9\n",
            "4\n",
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 5: sWAP cASE\n",
        "\n",
        "def swap_case(s):\n",
        "    result = ''\n",
        "    for i in s:\n",
        "        if i.isupper():\n",
        "            result += i.lower()\n",
        "        else:\n",
        "            result += i.upper()\n",
        "    return result\n",
        "\n",
        "# def swap_case(s):\n",
        "#     result = s.swapcase()\n",
        "#     return result\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    s = input()\n",
        "    result = swap_case(s)\n",
        "    print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2YNfzrz-mWn5",
        "outputId": "53eef91d-e3bc-41f1-9304-c8e55f9a3bff"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ImrAn AbdUl\n",
            "iMRaN aBDuL\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 6: Arithmetic Operators\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    a = int(input())\n",
        "    b = int(input())\n",
        "    print(a+b)\n",
        "    print(a-b)\n",
        "    print(a*b)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Dg9VHUKOsDa",
        "outputId": "c3c0d604-85d4-4783-b420-c6a440ac883d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "6\n",
            "9\n",
            "15\n",
            "-3\n",
            "54\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 7: Python: Division\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    a = int(input())\n",
        "    b = int(input())\n",
        "    print(a//b)\n",
        "    print(a/b)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LmN57acoVKW8",
        "outputId": "6d7a86a1-2cdd-4501-ee62-952ccf6fd6ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "6\n",
            "0\n",
            "0.3333333333333333\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 8: Python If-Else\n",
        "\n",
        "#!/bin/python3\n",
        "\n",
        "import math\n",
        "import os\n",
        "import random\n",
        "import re\n",
        "import sys\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    n = int(input().strip())\n",
        "\n",
        "    if n % 2 == 0:\n",
        "        if 5 >= n >= 2:\n",
        "            print(\"Not Weird\")\n",
        "        elif 20 >= n >= 6:\n",
        "            print(\"Weird\")\n",
        "        elif n > 20:\n",
        "            print(\"Not Weird\")\n",
        "    else:\n",
        "        print(\"Weird\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FkEnPQ76Vkzc",
        "outputId": "39463197-1e7d-496c-f87e-1bc98b2a52c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "69\n",
            "Weird\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 9: Nested Lists\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    students = []\n",
        "    marks = []\n",
        "\n",
        "    for _ in range(int(input())):\n",
        "        name = input()\n",
        "        score = float(input())\n",
        "        students.append([name,score])\n",
        "        marks.append(score)\n",
        "\n",
        "    count = marks.count(min(marks))\n",
        "\n",
        "    for _ in range(count):\n",
        "        marks.remove(min(marks))\n",
        "        \n",
        "    secondLow = min(marks)\n",
        "    students.sort()\n",
        "\n",
        "    op = []\n",
        "    for j in students:\n",
        "        if j[1] == secondLow:\n",
        "            op.append(j)\n",
        "    for i in op:\n",
        "        print(i[0])\n"
      ],
      "metadata": {
        "id": "NwZciREyVlGy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 10: Loops\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    n = int(input())\n",
        "\n",
        "    for i in range(n):\n",
        "        print(i * i)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i_vSwmqYVlJZ",
        "outputId": "eecc3067-831f-4ea6-aa6c-1423a45d674b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "0\n",
            "1\n",
            "4\n",
            "9\n",
            "16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 11: Write a function\n",
        "\n",
        "def is_leap(year):\n",
        "    leap = False\n",
        "    \n",
        "    # Write your logic here\n",
        "    if year % 4 == 0:\n",
        "        if year % 100 == 0:\n",
        "            if year % 400 == 0:\n",
        "                leap = True\n",
        "            else:\n",
        "                leap = False\n",
        "        else:\n",
        "            leap = True\n",
        "    else:\n",
        "        leap = False\n",
        "\n",
        "    return leap\n",
        "\n",
        "year = int(input())\n",
        "print(is_leap(year))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pHMj4jTBl1X0",
        "outputId": "02f9e7c5-b943-41d9-f53e-b0c0cdff2dec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1900\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 12: Find a string\n",
        "\n",
        "def count_substring(string, sub_string):\n",
        "    strLen, subStrLen = len(string), len(sub_string)\n",
        "    count = 0\n",
        "    for i in range(strLen - subStrLen + 1):\n",
        "        if string[i:(i+subStrLen)] == sub_string:\n",
        "          count += 1\n",
        "    return count\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    string = input().strip()\n",
        "    sub_string = input().strip()\n",
        "    \n",
        "    count = count_substring(string, sub_string)\n",
        "    print(count)"
      ],
      "metadata": {
        "id": "QpbPE9gWl1aF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9071bd5a-8463-43a4-8275-7d73330f3130"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ABCDCDCABCDCDCABCDCDC\n",
            "CDC\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Problem 13: List\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    N = int(input())\n",
        "    ourList = []\n",
        "\n",
        "    for i in range(N):\n",
        "        options = input().split()\n",
        "\n",
        "        for i in range(1, len(options)):\n",
        "            options[i] = int(options[i])\n",
        "\n",
        "        if options[0] == \"insert\":\n",
        "            ourList.insert(options[1],options[2])\n",
        "\n",
        "        elif options[0] == \"append\":\n",
        "            ourList.append(options[1])\n",
        "\n",
        "        elif options[0] == \"sort\":\n",
        "            ourList.sort()\n",
        "\n",
        "        elif options[0] == \"remove\":\n",
        "            ourList.remove(options[1])\n",
        "\n",
        "        elif options[0] == \"reverse\":\n",
        "            ourList.reverse()\n",
        "\n",
        "        elif options[0] == \"pop\":\n",
        "            ourList.pop()\n",
        "        \n",
        "        elif options[0] == \"print\":\n",
        "            print(ourList)\n",
        "\n",
        "        else:\n",
        "            print(\"Wrong Input\")"
      ],
      "metadata": {
        "id": "5v1S6WMTl1cO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a4f2d675-cefb-48bb-9bde-fb739535ae91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "2\n",
            "Wrong Input\n",
            "3\n",
            "3\n",
            "Wrong Input\n",
            "Wrong Input\n"
          ]
        }
      ]
    }
  ]
}